#!/usr/bin/env python

import argparse
import os
import sys
import time
from ConfigParser import SafeConfigParser

import boto


aparser = argparse.ArgumentParser(description='Create an ec2 instance.')
aparser.add_argument('-f', '--file', dest='filename', default='ec2.conf',
                           help='Name of the config file in etc/private - defaults to ec2.conf')
aparser.add_argument('-n', '--no-poll', action='store_true',
                           help='Poll sqs until server has finished bootstapping')
aparser.add_argument('section', type=str,
                           help='Name of the section within the config file')
aparser.add_argument('name', type=str,
                           help='Name of the quickness machine')
args = aparser.parse_args()


cparser = SafeConfigParser()
cparser.read(os.path.join('etc/private/', args.filename))


try:
    aws_identity = os.environ['AWS_IDENTITY']
except KeyError:
    print 'Please set the AWS_IDENTITY environment variable to create a new ec2 machine'
    sys.exit()

branch_option = ""
if cparser.has_option(args.section, 'git_branch'):
    branch_option = "-b %s" % cparser.get(args.section, 'git_branch')

user_data = """#!/bin/bash

QUICKNESS_SCRIPTS=/root

echo "### Quickness SQS Messenger
sqs_message() {
    python \$QUICKNESS_SCRIPTS/ec2sqs.py %(access_key)s %(secret_key)s %(queue)s %(name)s \$1 \$2
}" >> /etc/profile.d/sqs.sh

source /etc/profile.d/sqs.sh

cd /root
wget -q %(ec2sqs)s
sqs_message bootstrap started

export DEBIAN_FRONTEND=noninteractive

apt-get -qq update
sqs_message bootstrap updated

apt-get -o DPkg::Options::=--force-confnew upgrade -qq -y < /dev/null
sqs_message bootstrap upgraded

apt-get -qq -y install autoconf automake build-essential git libtool ntp unzip
sqs_message bootstrap installed

su -l -c "git clone %(branch)s %(repo)s .quickness_repo" ubuntu
su -l -c "echo '### Quickness
source \$HOME/.quickness_repo/etc/profile' >> .profile" ubuntu

cp /home/ubuntu/.quickness_repo/etc/motd.tail /etc/motd.tail

sqs_message bootstrap finished
""" % {'branch': branch_option,
       'repo': cparser.get(args.section, 'git_repo'),
       'ec2sqs': cparser.get(args.section, 'ec2sqs_url'),
       'access_key': cparser.get(args.section, 'access_key'),
       'secret_key': cparser.get(args.section, 'secret_key'),
       'queue': cparser.get(args.section, 'queue_url'),
       'name': args.name}

conn = boto.connect_ec2()

# Make sure quickness name is going to be unique
quick_machines = []
reservations = conn.get_all_instances(filters={'tag:Name': 'quickness'})
for res in reservations:
    for instance in res.instances:
        if instance.tags.has_key('Quickness'):
            quick_machines.append(instance.tags.get('Quickness'))

if args.name in quick_machines:
    print 'Quickness machine names must be unique'
    sys.exit()

if args.section not in cparser.sections():
    print 'Section not found'
    sys.exit()

print 'Attempting to create an instance with Quickness tag %s...' % args.name
image = conn.get_image(cparser.get(args.section, 'image'))

kwargs = {
    'key_name': cparser.get(args.section, 'key_name'),
    'instance_type': cparser.get(args.section, 'instance_type'),
    'security_group_ids': [cparser.get(args.section, 'security_group')],
    'user_data': user_data,
}
if cparser.has_option(args.section, 'placement'):
    kwargs['placement'] = cparser.get(args.section, 'placement')

reservation = image.run(**kwargs)

# Give it a sec to come up
time.sleep(3)
instance = reservation.instances[0]
instance.add_tag('Name', 'quickness')
instance.add_tag('Quickness', args.name)
